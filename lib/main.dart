import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:googleapis_auth/auth_io.dart' as auth show clientViaServiceAccount;
import 'package:googleapis_auth/googleapis_auth.dart' as auth;
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

import 'package:travel_app2/app/modules/notifications/controllers/notifications_controller.dart';
import 'package:travel_app2/app/services/api_service.dart';
import 'firebase_options.dart'; // Generated by FlutterFire
import 'app/constants/app_color.dart';
import 'app/routes/app_pages.dart';

/// ------------------------------
/// üîë Get Firebase Access Token
/// ------------------------------
Future<String?> getAccessToken() async {
  try {
    // Load service account json (must be added in pubspec.yaml under assets:)
    final data = await rootBundle.loadString('assets/service-account.json');
    final jsonKey = json.decode(data);

    final accountCredentials = auth.ServiceAccountCredentials.fromJson(jsonKey);
    final scopes = ['https://www.googleapis.com/auth/firebase.messaging'];

    final client = await auth.clientViaServiceAccount(accountCredentials, scopes);

    final token = client.credentials.accessToken;
    print("‚úÖ Access Token Data: ${token.data}");
    print("‚è≥ Expiry: ${token.expiry}");
    print("üîí Type: ${token.type}");

    client.close(); // ‚úÖ Close to avoid memory leaks
    return token.data;
  } catch (e, st) {
    print("‚ö†Ô∏è Access token error: $e");
    print("üìç Stacktrace: $st");
    return null;
  }
}

/// ------------------------------
/// Background Message Handler
/// ------------------------------
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print("üì© BG Message: ${message.notification?.title} - ${message.notification?.body}");
}

/// ------------------------------
/// Local Notifications Setup
/// ------------------------------
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

Future<void> setupLocalNotifications() async {
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('@mipmap/ic_launcher');

  const InitializationSettings initializationSettings =
      InitializationSettings(android: initializationSettingsAndroid);

  await flutterLocalNotificationsPlugin.initialize(initializationSettings);

  // Create Android Notification Channel
  const AndroidNotificationChannel channel = AndroidNotificationChannel(
    'high_importance_channel', // id
    'High Importance Notifications', // title
    description: 'Used for important notifications',
    importance: Importance.high,
  );

  await flutterLocalNotificationsPlugin
      .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(channel);
}

/// ------------------------------
/// Main Entry
/// ------------------------------
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  await GetStorage.init();
  Get.put(ApiService());
  Get.put(NotificationController());

  // Local notifications
  await setupLocalNotifications();

  // Firebase Messaging setup
  try {
    FirebaseMessaging messaging = FirebaseMessaging.instance;

    NotificationSettings settings = await messaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );
    print('üìå Notification Permission: ${settings.authorizationStatus}');

    // üì± Device Token
    String? deviceToken = await messaging.getToken();
    print('üì± Device Token: $deviceToken');

    // üîÑ Token Refresh Listener
    FirebaseMessaging.instance.onTokenRefresh.listen((newToken) {
      print("üîÑ Refreshed Token: $newToken");
      // TODO: send to backend
    });

    // üîë Firebase Access Token
    String? accessToken = await getAccessToken();
    print('üîë Firebase Access Token: $accessToken');

    // Foreground message handling
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print("üì© Foreground Message: ${message.notification?.title}");

      RemoteNotification? notification = message.notification;
      AndroidNotification? android = message.notification?.android;

      if (notification != null && android != null) {
        flutterLocalNotificationsPlugin.show(
          notification.hashCode,
          notification.title,
          notification.body,
          const NotificationDetails(
            android: AndroidNotificationDetails(
              'high_importance_channel',
              'High Importance Notifications',
              channelDescription: 'Used for important notifications',
              importance: Importance.high,
              priority: Priority.high,
              showWhen: true,
            ),
          ),
        );
      }
    });
  } catch (e) {
    print("‚ö†Ô∏è Notification setup error: $e");
  }

  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  runApp(const MyApp());
}

/// ------------------------------
/// App
/// ------------------------------
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: AppColors.mainBg,
      ),
      initialRoute: Routes.SPLASH,
      getPages: AppPages.routes,
    );
  }
}
