import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:googleapis_auth/auth_io.dart' as auth show clientViaServiceAccount;
import 'package:googleapis_auth/googleapis_auth.dart' as auth;
import 'package:travel_app2/app/modules/notifications/controllers/notifications_controller.dart';
import 'package:travel_app2/app/services/api_service.dart';
import 'firebase_options.dart'; // Generated by FlutterFire
import 'app/constants/app_color.dart';
import 'app/routes/app_pages.dart';


// ------------------------------
// 🔑 Access Token Function
// ------------------------------
Future<String?> getAccessToken() async {
  try {
    // Load service account json (make sure added in pubspec.yaml under assets:)
    final data = await rootBundle.loadString('assets/service-account.json');
    final jsonKey = json.decode(data);

    final accountCredentials = auth.ServiceAccountCredentials.fromJson(jsonKey);
    final scopes = ['https://www.googleapis.com/auth/firebase.messaging'];

    final client = await auth.clientViaServiceAccount(accountCredentials, scopes);

    return client.credentials.accessToken.data;
  } catch (e) {
    print("⚠️ Access token error: $e");
    return null;
  }
}

// ------------------------------
// Background message handler
// ------------------------------
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print("📩 BG Message: ${message.notification?.title} - ${message.notification?.body}");
}

// ------------------------------
// Main
// ------------------------------
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  await GetStorage.init();
  Get.put(ApiService());
  Get.put(NotificationController());

  // Firebase Messaging
  try {
    FirebaseMessaging messaging = FirebaseMessaging.instance;

    NotificationSettings settings = await messaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );
    print('📌 Notification Permission: ${settings.authorizationStatus}');

    // 📱 Device Token
    String? deviceToken = await messaging.getToken();
    print('📱 Device Token: $deviceToken');

    // 🔑 Firebase Access Token
    String? accessToken = await getAccessToken();
    print('🔑 Firebase Access Token: $accessToken');

  } catch (e) {
    print("⚠️ Notification permission error: $e");
  }

  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  runApp(const MyApp());
}

// ------------------------------
// App
// ------------------------------
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: AppColors.mainBg,
      ),
      initialRoute: Routes.SPLASH,
      getPages: AppPages.routes,
    );
  }
}
